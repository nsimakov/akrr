#!/bin/sh
cd "${0%/*}" || exit                                # Run from this directory
. ${WM_PROJECT_DIR:?}/bin/tools/RunFunctions        # Tutorial run functions
#------------------------------------------------------------------------------
start=$(date +%s.%N)

# Alternative decomposeParDict name:
# decompDict="-decomposeParDict system/decomposeParDict"
decompDict=""
## Standard decomposeParDict name:
# unset decompDict
CORES=${AKRR_CORES:=4}
sed -i "s/numberOfSubdomains.*/numberOfSubdomains ${CORES};/" system/decomposeParDict


# copy motorbike surface from resources directory
mkdir -p constant/triSurface

#cp -f \
#    "$FOAM_TUTORIALS"/resources/geometry/motorBike.obj.gz \
#    constant/triSurface/

runApplication surfaceFeatureExtract

runApplication blockMesh

runApplication $decompDict decomposePar

# Using distributedTriSurfaceMesh?
if foamDictionary -entry geometry -value system/snappyHexMeshDict | \
   grep -q distributedTriSurfaceMesh
then
    echo "surfaceRedistributePar does not need to be run anymore"
    echo " - distributedTriSurfaceMesh will do on-the-fly redistribution"
fi

start_snappy=$(date +%s.%N)
runParallel $decompDict snappyHexMesh -overwrite
end_snappy=$(date +%s.%N)
runtime_snappy=$( echo "$end_snappy - $start_snappy" | bc -l )
echo "Snappy run-time: ${runtime_snappy}"

runParallel $decompDict topoSet

#- For non-parallel running: - set the initial fields
# restore0Dir

#- For parallel running: set the initial fields
restore0Dir -processor

runParallel $decompDict patchSummary

runParallel $decompDict potentialFoam -writephi

runParallel $decompDict checkMesh -writeFields '(nonOrthoAngle)' -constant

start_solver=$(date +%s.%N)
runParallel $decompDict $(getApplication)
end_solver=$(date +%s.%N)
runtime_solver=$( echo "$end_solver - $start_solver" | bc -l )
echo "Solver run-time: ${runtime_solver}"

runApplication reconstructParMesh -constant

runApplication reconstructPar -latestTime

#------------------------------------------------------------------------------
end=$(date +%s.%N)
runtime=$( echo "$end - $start" | bc -l )

echo "Total run-time: ${runtime}"

# Print more metrics
# pring mesh info
echo "# log.checkMesh #"
cat log.checkMesh
# print header for build info
# sed -n '/[*] [*] [*] [*] [*] [*] [*] [*] [*] [*] /q;p' log.simpleFoam
# print last time for run info
echo "# log.simpleFoam #"
sed -n '/Time = 500/,$p' log.simpleFoam
echo "End Allrun"
