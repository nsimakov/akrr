walltime_limit = 20
nsteps = 50000
parser = "gromacs_parser.py"

# path to run script relative to AppKerDir on particular resource
executable = "execs"
input_param = "inputs/gromacs/mem"

# common commands among resources to be executed prior the application kernel execution
# usually copying of input parameters, application signature calculation
run_script_pre_run = """#create working dir
export AKRR_TMP_WORKDIR=`mktemp -d {network_scratch}/gromacs.XXXXXXXXX`
echo "Temporary working directory: $AKRR_TMP_WORKDIR"
cd $AKRR_TMP_WORKDIR

#Copy inputs
cp {appkernel_dir}/{input_param}/* ./
"""

appkernel_run_env_template = """
EXE=`which gmx_mpi`
RUN_APPKERNEL="mpirun $EXE mdrun -nsteps {nsteps}"
"""

run_script_post_runCustom = """
grep -A5000 -m1 "GROMACS: " md.log | grep -B5000 -m1 "++++ PLEASE READ AND CITE THE FOLLOWING REFERENCE ++++" >> $AKRR_APP_STDOUT_FILE 2>&1
grep -A5000 -m1 "M E G A - F L O P S   A C C O U N T I N G" md.log >> $AKRR_APP_STDOUT_FILE 2>&1
"""

# common commands among resources to be executed after the application kernel execution
# usually cleaning up
run_script_post_run = """
#clean-up
cd $AKRR_TASK_WORKDIR
if [ "${{AKRR_DEBUG=no}}" = "no" ]
then
        echo "Deleting temporary files"
        rm -rf $AKRR_TMP_WORKDIR
else
        echo "Copying temporary files"
        cp -r $AKRR_TMP_WORKDIR workdir
        rm -rf $AKRR_TMP_WORKDIR
fi
"""

# adding recourd about app to db
# mod_appkernel_app_kernel_def:
#    ak_def_id, name, ak_base_name, processor_unit, enabled, description, visible, control_criteria
# mod_akrr_appkernels:
#    id,name,nodes_list
db_setup = {
    "mod_appkernel_app_kernel_def":
        (37, 'GROMACS', 'gromacs', 'node', 0,
         """<a href="http://www.gromacs.org/" target="_blank" """
         """alt="GROMACS">GROMACS:</a>  molecular dynamics simulation\r\n<p>""",
         0, None),
    "mod_akrr_appkernels": (37, 'gromacs', '1')
}
