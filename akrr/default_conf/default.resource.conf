# Remote access method to the resource (default ssh)
remote_access_method = 'ssh'
# Remote copy method to the resource (default scp)
remote_copy_method = 'scp'

ssh_password = None
ssh_private_key_file = None
ssh_private_key_password = None

# Scratch visible across all nodes
network_scratch = '$SCRATCH'
# Local scratch only locally visible
local_scratch = '/tmp'

# master batch job script template
batch_job_template = """{batch_job_header_template}

{akrr_common_commands_template}

{akrr_run_appkernel}

{akrr_common_cleanup_template}
"""

# Template for common Parameters
akrr_common_commands_template = '''#Common commands
export AKRR_NODES={akrr_num_of_nodes}
export AKRR_CORES={akrr_num_of_cores}
export AKRR_CORES_PER_NODE={akrr_ppn}
export AKRR_NETWORK_SCRATCH="{network_scratch}"
export AKRR_LOCAL_SCRATCH="{local_scratch}"
export AKRR_TASK_WORKDIR="{akrr_task_work_dir}"
export AKRR_APPKER_DIR="{appkernel_dir}"
export AKRR_AKRR_DIR="{akrr_data}"

export AKRR_APPKER_NAME="{akrr_appkernel_name}"
export AKRR_RESOURCE_NAME="{akrr_resource_name}"
export AKRR_TIMESTAMP="{akrr_time_stamp}"
export AKRR_APP_STDOUT_FILE="$AKRR_TASK_WORKDIR/appstdout"

export AKRR_APPKERNEL_INPUT="{appkernel_dir}/{input_param}"
export AKRR_APPKERNEL_EXECUTABLE="{appkernel_dir}/{executable}"

source "$AKRR_APPKER_DIR/execs/bin/akrr_util.bash"

#Populate list of nodes per MPI process
{node_list_setter_template}

export PATH="$AKRR_APPKER_DIR/execs/bin:$PATH"

cd "$AKRR_TASK_WORKDIR"

#run common tests
akrr_perform_common_tests

#Write some info to gen.info, JSON-Like file
akrr_write_to_gen_info "start_time" "`date`"
akrr_write_to_gen_info "node_list" "$AKRR_NODELIST"
'''

akrr_run_appkernel = """{run_script_pre_run}

{appkernel_run_env_template}

{akrr_gen_appker_sign}

{akrr_run_appkernel_template}

{run_script_post_runCustom}

{run_script_post_run}
"""

appkernel_run_env_template = ""

akrr_gen_appker_sign = """# Generate AppKer signature
appsigcheck.sh $EXE $AKRR_TASK_WORKDIR/.. >> $AKRR_APP_STDOUT_FILE
"""

# default template for app kernel launching
akrr_run_appkernel_template = """#Execute AppKer
akrr_write_to_gen_info "appkernel_start_time" "`date`"
$RUN_APPKERNEL >> $AKRR_APP_STDOUT_FILE 2>&1
akrr_write_to_gen_info "appkernel_end_time" "`date`"
"""

akrr_common_cleanup_template = 'akrr_write_to_gen_info "end_time" "`date`"'

# network file system hints
mpi_io_hints = ""

# Node list setter
node_list_setter = {
    'pbs': """export AKRR_NODELIST=`cat $PBS_NODEFILE`""",
    'slurm': """export AKRR_NODELIST=`srun -l --ntasks-per-node=$AKRR_CORES_PER_NODE -n $AKRR_CORES hostname -s|sort -n| awk '{{printf "%s ",$2}}' `""",
    'shell': """export AKRR_NODELIST=`printf 'localhost %.0s' $(seq 1 ${{AKRR_CORES}})|xargs`""",
    'openstack': """export AKRR_NODELIST=localhost"""
}

# common commands among resources to be executed prior the application kernel execution
# usually copying of input parameters, application signature calculation
run_script_pre_run = """#create working dir
export AKRR_TMP_WORKDIR=`mktemp -d {network_scratch}/ak.XXXXXXXXX`
echo "Temporary working directory: $AKRR_TMP_WORKDIR"
cd $AKRR_TMP_WORKDIR

#Copy inputs
if [ -d "{appkernel_dir}/{input_param}" ]
then
    cp {appkernel_dir}/{input_param}/* ./
fi
if [ -f "{appkernel_dir}/{input_param}" ]
then
    cp {appkernel_dir}/{input_param} ./
fi
"""

# common commands among resources to be executed after the application kernel execution
# usually cleaning up
run_script_post_run = """#clean-up
cd $AKRR_TASK_WORKDIR
if [ "${{AKRR_DEBUG=no}}" = "no" ]
then
    echo "Deleting temporary files"
    rm -rf $AKRR_TMP_WORKDIR
else
    echo "Copying temporary files"
    cp -r $AKRR_TMP_WORKDIR workdir
    rm -rf $AKRR_TMP_WORKDIR
fi
"""

run_script_post_runCustom = ""

# shell to use
shell = "bash"

info = ""

auto_walltime_limit = True

auto_walltime_limit_overhead = 0.2

gateway_reporting = False
gateway_user = "akrr@xdmod.org"

# maximal number of active tasks, default is -1, that is no limits
max_number_of_active_tasks = -1
